# DevTracker - Progresso do Projeto (registro t√©cnico)

## üìÖ Data: 2025-04-14

### ‚úÖ Etapas conclu√≠das at√© agora:

#### 1. Inicializa√ß√£o do projeto
- Estrutura de pastas criada (core/, models/, schemas/, services/, api/v1/endpoints/).
- Cria√ß√£o do arquivo `.env` com vari√°veis de ambiente (depois adicionado ao `.gitignore`).
- Cria√ß√£o do `requirements.txt` e instala√ß√£o das depend√™ncias.
- Banco de dados inicialmente pensado como PostgreSQL, depois alterado para SQLite por simplicidade no ambiente local.

#### 2. Conex√£o com banco de dados
- Implementa√ß√£o do `SessionLocal` com SQLAlchemy para SQLite.
- Cria√ß√£o do arquivo `init_db.py` para inicializar e testar o banco de dados.
- Modelo de dados `User` criado em `models/user.py`.

#### 3. Cria√ß√£o de usu√°rio
- Cria√ß√£o do `UserCreate` schema para valida√ß√£o com Pydantic.
- Fun√ß√£o `create_user` implementada em `services/user_service.py`.
- Integra√ß√£o com bcrypt para hashing de senha ao criar usu√°rio.
- Testes manuais e autom√°ticos confirmam a cria√ß√£o e armazenamento correto do usu√°rio.

#### 4. Leitura de usu√°rio (GET)
- Implementado endpoint GET `/user/{user_id}` para buscar usu√°rios por ID.
- Tratamento de erro com status 404 caso o usu√°rio n√£o exista.

#### 5. Testes automatizados
- Pytest configurado.
- Primeiros testes rodando com sucesso (1 passed, 0 warnings).
- Problemas de imports resolvidos usando `PYTHONPATH=.` ou `python -m pytest`.

#### 6. Atualiza√ß√£o de usu√°rio (PUT)
- Endpoint PUT `/user/{user_id}` criado.
- Fun√ß√£o `update_user` em `services/user_service.py` implementada.
- Schema `UserUpdate` criado.
- L√≥gica de verifica√ß√£o e update de dados validada.

---

### üìå Observa√ß√µes gerais
- O projeto est√° com estrutura limpa e modular.
- A senha est√° sendo hasheada corretamente com bcrypt.
- O endpoint de update valida e atualiza os campos corretamente.

---

### üß† Pr√≥ximos passos sugeridos
- Implementar endpoint DELETE (remo√ß√£o de usu√°rios).
- Continuar testando com Pytest: criar usu√°rios em massa, testes de update e delete.
- Explorar integra√ß√£o futura com front-end ou documenta√ß√£o com Swagger.

---

> "Esse registro serve para acompanhar o aprendizado t√©cnico de forma cronol√≥gica e completa."

